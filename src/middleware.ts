// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { getToken } from 'next-auth/jwt'

const protectedPaths = ['/projects']
const publicPaths = ['/auth/signin', '/api/auth', '/favicon.ico', '/_next', '/']

const isProtectedPath = (path: string) =>
  protectedPaths.some(prefix => path.startsWith(prefix))

const isPublicPath = (path: string) =>
  publicPaths.some(prefix => {
    // –î–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (prefix === '/') {
      return path === '/'
    }
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
    return path.startsWith(prefix)
  })

  export async function middleware(request: NextRequest) {
    try {
      const path = request.nextUrl.pathname
      console.log('\n=== MIDDLEWARE START ===')
      console.log('üìç Requested Path:', path)
      
      const token = await getToken({
        req: request,
        secret: process.env.NEXTAUTH_SECRET
      })
      console.log('üé´ Token present?', !!token)
  
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –æ–±–∞ –ø—É—Ç–∏
      if (token && (path === '/auth/signin' || path === '/api/auth/signin')) {
        console.log('üîÑ Authorized user redirected from signin page')
        return NextResponse.redirect(new URL('/', request.url))
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –ª–∏ –ø—É—Ç—å
      const isPublic = isPublicPath(path)
      if (isPublic) {
        return NextResponse.next()
      }
  
      // –î–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
      const isProtected = isProtectedPath(path)
      if (isProtected && !token) {
        console.log('‚ùå No token found - redirecting to signin')
        const signInUrl = new URL('/auth/signin', request.url)
        signInUrl.searchParams.set('callbackUrl', path)
        return NextResponse.redirect(signInUrl)
      }
  
      return NextResponse.next()
    } catch (error) {
      console.error('üö® Middleware Error:', error)
      return NextResponse.next()
    }
  }

export const config = {
  matcher: [
    // Match all paths
    '/:path*',
    // Except
    '/((?!_next/static|_next/image|favicon\\.ico).*)'
  ],
}